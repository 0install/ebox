println("E initialised")

def makeTraceln := <unsafe:org.erights.e.elib.debug.makeTraceln>
def makeELoader := <elang:interp.ELoaderAuthor>(makeTraceln)

def [json] := interp.getArgs()

def jsonSurgeon := <elib:serial.deJSONKit>.makeSurgeon()
def launchData := jsonSurgeon.unserialize(json)
def [ => locations, => dependencies, => args, => mainURI, => main, => instancePath ] := launchData

def <instance> := <file>[instancePath]
def petName := <instance>.getName()

# Create a loader for each module...

# URI -> (promise, resolver)
def loaders := [].asMap().diverge()
for uri => path in locations {
	loaders[uri] := Ref.promise()
}

for uri => deps in dependencies {
	def loader
	def envExtras := ["this__uriGetter" => loader].diverge()
	for [name, dep_iface] in deps {
		envExtras[`${name}__uriGetter`] := loaders[dep_iface][0]
	}
	def rx`.*/(@{leaf}[^/]+)` := uri
	#traceln(`new loader $leaf from $uri with $envExtras`)
	bind loader := makeELoader(<file:/>[locations[uri]], envExtras.snapshot(), `$leaf$$`)
	loaders[uri][1].resolve(loader)
}

var nWindows := 0

def powerbox {
	to makeShell() {
		# Open the main window
		def SWT := <swt:makeSWT>
		def <widget> := <swt:widgets.*>
		def shell := <widget:makeShell>(currentDisplay)
		def <swttools> := <import:org.erights.e.ui.swt.*>
		def swtGrid__quasiParser := <swttools:swtGridQParserMaker>()
		def panel := <widget:makeComposite>(shell, 0)
		swtGrid`$shell: $panel.X.Y`
		shell.getLayout().setMarginWidth(0)
		shell.getLayout().setMarginHeight(0)
		var menuBar := null
		def shellFacet {
			to setText(title :String) {
				shell.setText(`$petName: $title`)
			}

			to addMenu(name :String) {
				if (menuBar == null) {
					menuBar := <widget:makeMenu>(shell, SWT.getBAR())
					shell.setMenuBar(menuBar)
				}
				def menuHeader := <widget:makeMenuItem>(menuBar, SWT.getCASCADE())
				menuHeader.setText(name)
				def menu := <widget:makeMenu>(shell, SWT.getDROP_DOWN())
				menuHeader.setMenu(menu)

				return menu
			}

			to getPanel() {
				return panel
			}

			to whenDisposed(callback) {
				shell.addDisposeListener(def _ {
					to widgetDisposed(event) { callback() }
				})
			}

			to openFile(target) {
				def dialog := <widget:makeFileDialog>(shell, SWT.getOPEN())
				def selected := dialog.open()
				if (selected != null) {
					target.open(<file>[selected].deepReadOnly())
				}
			}

			to saveFile(source) {
				def dialog := <widget:makeFileDialog>(shell, SWT.getSAVE())
				dialog.setFileName(source.getDefaultFilename())
				def selected := dialog.open()
				if (selected != null) {
					source.saveAs(<file>[selected])
				}
			}

			to open() {
				shell.open()
				nWindows += 1
			}

			to dispose() {
				shell.dispose()
			}
		}
		shellFacet.whenDisposed(fn {
			nWindows -= 1
			if (nWindows == 0) {
				interp.continueAtTop()
			}
		})
		return shellFacet
	}
}

def eParser := <elang:syntax.makeEParser>
def defaultAuthsCode := eParser(<instance:defaultAuths.e>.getTwine())
def defaultAuths := defaultAuthsCode.eval(privilegedScope.with([=> <instance>, => powerbox])).diverge()

def makeScope := <unsafe:org.erights.e.elang.scope.makeScope>
def topScope := makeScope.fromState(safeScope.getState() | defaultAuths, "top$")

println("Starting...")
loaders[mainURI][0].getWithBase(main, topScope)
