def <swttools> := <import:org.erights.e.ui.swt.*>
def swtGrid__quasiParser := <swttools:swtGridQParserMaker>()

# GUI tools
def makePowerbox(privilegedScope, petName) {
	def currentDisplay := privilegedScope["currentDisplay"]
	def <swt> := privilegedScope["swt__uriGetter"]
	def <widget> := <swt:widgets.*>
	def SWT := <swt:makeSWT>

	var nWindows := 0
	def interp := privilegedScope["interp"]
	def <file> := privilegedScope["file__uriGetter"]

	def confirm(parent, question) {
		def box := <widget:makeMessageBox>(parent,
						SWT.getICON_QUESTION() |
						SWT.getCANCEL() | SWT.getOK())
		box.setMessage(question)
		def resp := box.open()
		return resp == SWT.getOK()
	}

	return def powerbox {
		to makeShell() {
			# Open the main window
			def shell := <widget:makeShell>(currentDisplay)
			def panel := <widget:makeComposite>(shell, 0)
			swtGrid`$shell: $panel.X.Y`
			shell.getLayout().setMarginWidth(0)
			shell.getLayout().setMarginHeight(0)
			var menuBar := null
			def shellFacet {
				to setText(title :String) {
					shell.setText(`$petName: $title`)
				}

				to addMenu(name :String) {
					if (menuBar == null) {
						menuBar := <widget:makeMenu>(shell, SWT.getBAR())
						shell.setMenuBar(menuBar)
					}
					def menuHeader := <widget:makeMenuItem>(menuBar, SWT.getCASCADE())
					menuHeader.setText(name)
					def menu := <widget:makeMenu>(shell, SWT.getDROP_DOWN())
					menuHeader.setMenu(menu)

					return menu
				}

				to getPanel() {
					return panel
				}

				to whenDisposed(callback) {
					shell.addDisposeListener(def _ {
						to widgetDisposed(event) { callback() }
					})
				}

				to addCloseListener(listener) {
					# SWT crashes if it gets an exception, so do things asynchronously
					shell.addShellListener(def _ {
						to shellClosed(ev) {
							ev.setDoit(false)
							listener<-run()
						}
						match _ {}
					})
				}

				to openFile(target) {
					def dialog := <widget:makeFileDialog>(shell, SWT.getOPEN())
					def selected := dialog.open()
					if (selected != null) {
						target.open(<file>[selected].deepReadOnly())
					}
				}

				to saveFile(source) {
					def dialog := <widget:makeFileDialog>(shell, SWT.getSAVE())
					def defaultPath := source.getDefaultFilename()

					var initialSelection := null

					if (defaultPath =~ s :String) {
						# Ignore any leading path component - the user must choose the location
						# if the application doesn't already have access to the file (if it does
						# have access, it should provde the File object rather than a String).
						def leaf := <file:.>[s].getName()
						require(leaf[0] != '.', `Default filename cannot start with '.'`)
						dialog.setFileName(leaf)
						# (don't set initialSelection)
					} else {
						# getDefaultFilename can specify a particular file, but must prove it can
						# access it.
						switch (<file>.optUncall(defaultPath)) {
							match [==<file>, =="get", [path]] {
								# An actual file
								dialog.setFileName(path)
								initialSelection := defaultPath
							}
							match [file, =="deepReadOnly", []] {
								# A read-only file
								dialog.setFileName(<file>.optUnget(file))
								initialSelection := file
							}
						}
					}
					def selected := dialog.open()
					if (selected != null) {
						def selectedFile := <file>[selected]
						# Confirm overwriting an existing file, unless it's the file
						# we started with.
						if (selectedFile.exists() &&
							(initialSelection == null ||
							!(selectedFile <=> initialSelection))) {
							if (!confirm(shell, `Overwrite existing file $selected?`)) {
								return
							}
						}
						source.saveAs(<file>[selected])
					}
				}

				to confirm(question :String) :boolean {
					return confirm(shell, question)
				}

				to alert(msg :String) :void {
					def box := <widget:makeMessageBox>(shell,
									SWT.getICON_ERROR() |
									SWT.getOK())
					box.setMessage(msg)
					box.open()
				}

				to open() {
					shell.open()
					nWindows += 1
				}

				to dispose() {
					shell.dispose()
				}
			}
			shellFacet.whenDisposed(fn {
				nWindows -= 1
				if (nWindows == 0) {
					interp.continueAtTop()
				}
			})
			return shellFacet
		}
	}
}
